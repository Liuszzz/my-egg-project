{
  "_args": [
    [
      {
        "raw": "dargs@^6.0.0",
        "scope": null,
        "escapedName": "dargs",
        "name": "dargs",
        "rawSpec": "^6.0.0",
        "spec": ">=6.0.0 <7.0.0",
        "type": "range"
      },
      "F:\\liuxin\\egg-project\\node_modules\\common-bin"
    ]
  ],
  "_from": "dargs@^6.0.0",
  "_hasShrinkwrap": false,
  "_id": "dargs@6.0.0",
  "_location": "/dargs",
  "_nodeVersion": "8.11.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/dargs_6.0.0_1527329933419_0.13146743229601499"
  },
  "_npmUser": {
    "name": "sindresorhus",
    "email": "sindresorhus@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "dargs@^6.0.0",
    "scope": null,
    "escapedName": "dargs",
    "name": "dargs",
    "rawSpec": "^6.0.0",
    "spec": ">=6.0.0 <7.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/common-bin"
  ],
  "_resolved": "https://registry.npmjs.org/dargs/-/dargs-6.0.0.tgz",
  "_shasum": "da35d4633cd821de868f97d645f8d1f9b0353a24",
  "_shrinkwrap": null,
  "_spec": "dargs@^6.0.0",
  "_where": "F:\\liuxin\\egg-project\\node_modules\\common-bin",
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "sindresorhus.com"
  },
  "bugs": {
    "url": "https://github.com/sindresorhus/dargs/issues"
  },
  "dependencies": {},
  "description": "Reverse minimist. Convert an object of options into an array of command-line arguments.",
  "devDependencies": {
    "ava": "*",
    "xo": "*"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-6lJauzNaI7MiM8EHQWmGj+s3rP5/i1nYs8GAvKrLAx/9dpc9xS/4seFb1ioR39A+kcfu4v3jnEa/EE5qWYnitQ==",
    "shasum": "da35d4633cd821de868f97d645f8d1f9b0353a24",
    "tarball": "https://registry.npmjs.org/dargs/-/dargs-6.0.0.tgz",
    "fileCount": 4,
    "unpackedSize": 6974,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbCTSOCRA9TVsSAnZWagAAf3QQAJtvHrZte1/qJ8wnN5t5\n31a6RcoKJx2AAIG+kxJZ7hj0zSm0tEJwt+vnFe+qwxw7RUOQjGPJwgqJQV9R\ncWodc3FI+Bx3iQjLnchxhLlUiWGR3nbayaZrW8SdGP5qM1LORVCaR9dTahXA\nwbYWH1+DO9L1kmEvRv7c2c5RM3V06+MiCSXBqfp9MeqvwIflwX4j2wkX76UV\nrVRMIDw4KssZgS2nQVqLpCEeexTyyHvov/das8yMx4LgBflVzfYf7VSZn1L3\nMOwbOkH9HHK4hNDl9FB4hSBXTiwmn+iIuMPOCEpcPnLzFpljD8I788dnhT6I\ncdSg8jXLezMd15efBLJAtGqym0Kb9+JKN4Qwz8r7H9leJ1zmUabn5+Jy4X+I\n6PTo5UZDjS4Pg6o8SLu0efnaBrPBcYRWhplbvqPcPnpNgi8kZLiitmC4jke8\nUp2pKgM+E+mg6RR/NfDLuoagZ/FV/+gfLxHlNFZmYC0oiJIPZqT0yXyHr7Vb\nCCkCYQYgLivRz6hp6LEAgsL1vEq0bRfk4jK9H4vqT9ee7+qBYwvQDELjTxor\nOgo3lBBFgU+y8kG3ZpSXs62tRqsB4+I7VsmoHAObEPgfkps5tt/nFEVyO7jq\nsGiYqCAfX0fZhSt3GKQtBg8paOTRDPGfB8GjMiNdi4ejc7chRu7FzXWoyzC/\no3zn\r\n=/JF1\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=6"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "926509985730c9d233b03fc8bf753f7b4208ff4b",
  "homepage": "https://github.com/sindresorhus/dargs#readme",
  "keywords": [
    "reverse",
    "minimist",
    "options",
    "arguments",
    "args",
    "flags",
    "cli",
    "nopt",
    "commander",
    "bin",
    "binary",
    "command",
    "cmd",
    "inverse",
    "opposite",
    "invert",
    "switch",
    "construct",
    "parse",
    "parser",
    "argv"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "kevva",
      "email": "kevinmartensson@gmail.com"
    },
    {
      "name": "sindresorhus",
      "email": "sindresorhus@gmail.com"
    }
  ],
  "name": "dargs",
  "optionalDependencies": {},
  "readme": "# dargs [![Build Status](https://travis-ci.org/sindresorhus/dargs.svg?branch=master)](https://travis-ci.org/sindresorhus/dargs)\n\n> Reverse [`minimist`](https://github.com/substack/minimist). Convert an object of options into an array of command-line arguments.\n\nUseful when spawning command-line tools.\n\n\n## Install\n\n```\n$ npm install dargs\n```\n\n\n## Usage\n\n```js\nconst dargs = require('dargs');\n\nconst input = {\n\t_: ['some', 'option'],          // Values in '_' will be appended to the end of the generated argument list\n\tfoo: 'bar',\n\thello: true,                    // Results in only the key being used\n\tcake: false,                    // Prepends `no-` before the key\n\tcamelCase: 5,                   // CamelCase is slugged to `camel-case`\n\tmultiple: ['value', 'value2'],  // Converted to multiple arguments\n\tpieKind: 'cherry',\n\tsad: ':('\n};\n\nconst excludes = ['sad', /.*Kind$/];  // Excludes and includes accept regular expressions\nconst includes = ['camelCase', 'multiple', 'sad', /^pie.*/];\nconst aliases = {file: 'f'};\n\nconsole.log(dargs(input, {excludes}));\n/*\n[\n\t'--foo=bar',\n\t'--hello',\n\t'--no-cake',\n\t'--camel-case=5',\n\t'--multiple=value',\n\t'--multiple=value2',\n\t'some',\n\t'option'\n]\n*/\n\nconsole.log(dargs(input, {excludes, includes}));\n/*\n[\n\t'--camel-case=5',\n\t'--multiple=value',\n\t'--multiple=value2'\n]\n*/\n\n\nconsole.log(dargs(input, {includes}));\n/*\n[\n\t'--camel-case=5',\n\t'--multiple=value',\n\t'--multiple=value2',\n\t'--pie-kind=cherry',\n\t'--sad=:('\n]\n*/\n\n\nconsole.log(dargs({\n\tfoo: 'bar',\n\thello: true,\n\tfile: 'baz'\n}, {aliases}));\n/*\n[\n\t'--foo=bar',\n\t'--hello',\n\t'-f', 'baz'\n]\n*/\n```\n\n\n## API\n\n### dargs(input, [options])\n\n#### input\n\nType: `Object`\n\nObject to convert to command-line arguments.\n\n#### options\n\nType: `Object`\n\n##### excludes\n\nType: `Array`\n\nKeys or regex of keys to exclude. Takes precedence over `includes`.\n\n##### includes\n\nType: `Array`\n\nKeys or regex of keys to include.\n\n##### aliases\n\nType: `Object`\n\nMaps keys in `input` to an aliased name. Matching keys are converted to arguments with a single dash (`-`) in front of the aliased key and the value in a separate array item. Keys are still affected by `includes` and `excludes`.\n\n##### useEquals\n\nType: `boolean`<br>\nDefault: `true`\n\nSetting this to `false` makes it return the key and value as separate array items instead of using a `=` separator in one item. This can be useful for tools that doesn't support `--foo=bar` style flags.\n\n###### Example\n\n```js\nconsole.log(dargs({foo: 'bar'}, {useEquals: false}));\n/*\n[\n\t'--foo', 'bar'\n]\n*/\n```\n\n##### ignoreFalse\n\nType: `boolean`<br>\nDefault: `false`\n\nExclude `false` values. Can be useful when dealing with strict argument parsers that throw on unknown arguments like `--no-foo`.\n\n##### allowCamelCase\n\nType: `boolean`<br>\nDefault: `false`\n\nBy default, camelCased keys will be hyphenated. Enabling this will bypass the conversion process.\n\n###### Example\n\n```js\nconsole.log(dargs({fooBar: 'baz'}));\n//=> ['--foo-bar', 'baz']\n\nconsole.log(dargs({fooBar: 'baz'}, {allowCamelCase: true}));\n//=> ['--fooBar', 'baz']\n```\n\n\n## License\n\nMIT Â© [Sindre Sorhus](https://sindresorhus.com)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sindresorhus/dargs.git"
  },
  "scripts": {
    "test": "xo && ava"
  },
  "version": "6.0.0"
}
