{
  "_args": [
    [
      {
        "raw": "koa-session@^5.7.0",
        "scope": null,
        "escapedName": "koa-session",
        "name": "koa-session",
        "rawSpec": "^5.7.0",
        "spec": ">=5.7.0 <6.0.0",
        "type": "range"
      },
      "F:\\liuxin\\egg-project\\node_modules\\egg-session"
    ]
  ],
  "_from": "koa-session@^5.7.0",
  "_hasShrinkwrap": false,
  "_id": "koa-session@5.10.1",
  "_location": "/koa-session",
  "_nodeVersion": "8.11.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/koa-session_5.10.1_1545104196876_0.2683432854761518"
  },
  "_npmUser": {
    "name": "dead_horse",
    "email": "dead_horse@qq.com"
  },
  "_npmVersion": "5.8.0",
  "_phantomChildren": {
    "ms": "2.1.1"
  },
  "_requested": {
    "raw": "koa-session@^5.7.0",
    "scope": null,
    "escapedName": "koa-session",
    "name": "koa-session",
    "rawSpec": "^5.7.0",
    "spec": ">=5.7.0 <6.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/egg-session"
  ],
  "_resolved": "https://registry.npmjs.org/koa-session/-/koa-session-5.10.1.tgz",
  "_shasum": "5246e71eb87a6efd38c008f2dcb74dc00bb6e7a0",
  "_shrinkwrap": null,
  "_spec": "koa-session@^5.7.0",
  "_where": "F:\\liuxin\\egg-project\\node_modules\\egg-session",
  "bugs": {
    "url": "https://github.com/koajs/session/issues"
  },
  "dependencies": {
    "crc": "^3.4.4",
    "debug": "^3.1.0",
    "is-type-of": "^1.0.0",
    "uid-safe": "^2.1.3"
  },
  "description": "Koa cookie session middleware with external store support",
  "devDependencies": {
    "eslint": "3",
    "eslint-config-egg": "3",
    "istanbul": "0",
    "koa": "2",
    "mm": "^2.1.0",
    "mocha": "3",
    "mz-modules": "^2.0.0",
    "pedding": "^1.1.0",
    "should": "8",
    "supertest": "2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-N6i1kaypXcltNes+r1LSC/W8Y6mdEbnaLfhaUi0cqhA0/9snPMuh5aU7jjQzbCHc1twe7GJJQtG5ZdsNoArcZA==",
    "shasum": "5246e71eb87a6efd38c008f2dcb74dc00bb6e7a0",
    "tarball": "https://registry.npmjs.org/koa-session/-/koa-session-5.10.1.tgz",
    "fileCount": 7,
    "unpackedSize": 28847,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcGGtFCRA9TVsSAnZWagAASZcP/1WitbE2KkByEueY5EW8\nRfb/xF7oUrtN3+hR/J+kKfPANFUQKrcHXp6DEfsuA1H5qziav8TzakHwZ+aE\nNy2fm20+KnsDKFjUEJcYOm9+ruvQIGjIBrcSMOaIWsWoccZJdzrpoJlA2jUq\nEIVFk6p8DslNIvAN78oWqCWWRCDgLisx7/HHG7FKg8ZFl+dsqDrhPnhObrXf\n0+EWiDrIuwz59a9S1js5BwEYh1yio9D0E2d0f0K3D5PJ6XOhOPbetKvr55oD\n2I7E2VIgPNqcKXHTCsvTdQ0+ECWvy6UZpn439spA012iJxt92gOxt0Ra2mLF\nIkRVj1j8D+wTtXjUTHROvZp0LcskY8pdGKd3KYCI6urlEq9Xrmwqwe+LnA8B\nmeIUivwajLwrCBHJmw+/hjg5VGvPnIsjcG3KtQ5g1VQAfF6JPvglYYTr5t7C\nrg/LPtkkVSdTy3hYTCdiWGLsgihkHnpNIlnBa6nLA+CSWIWTCzaLX0dXUVCp\nPsfj5FswISpa532TGx6yPATPqQbCiDp2CZwXeWCYdWQu33BSL1bLY2SgO1fD\nAcfkgpO7RiCVcdc3XdefDXC+wDDK/+HohT60gjuKVuMzozWSQdnwwaIqPTRa\nvv8lAwNzIeSv6FWUhmU/gLzk6LRmSTEqbO31/TTwLxnGM4hUpGEyz+T1CM1u\n7P9v\r\n=02Zw\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=7.6"
  },
  "files": [
    "index.js",
    "lib"
  ],
  "gitHead": "e66fbd16bb05d5a4b8001ceb155c3f7440490407",
  "homepage": "https://github.com/koajs/session#readme",
  "keywords": [
    "koa",
    "middleware",
    "session",
    "cookie"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "aheckmann",
      "email": "aaron.heckmann+github@gmail.com"
    },
    {
      "name": "coderhaoxin",
      "email": "haoxins@outlook.com"
    },
    {
      "name": "dead_horse",
      "email": "dead_horse@qq.com"
    },
    {
      "name": "eivifj",
      "email": "eivind.fjeldstad@gmail.com"
    },
    {
      "name": "fengmk2",
      "email": "fengmk2@gmail.com"
    },
    {
      "name": "jongleberry",
      "email": "jonathanrichardong@gmail.com"
    },
    {
      "name": "juliangruber",
      "email": "julian@juliangruber.com"
    },
    {
      "name": "tjholowaychuk",
      "email": "tj@vision-media.ca"
    }
  ],
  "name": "koa-session",
  "optionalDependencies": {},
  "readme": "# koa-session\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![Gittip][gittip-image]][gittip-url]\n[![David deps][david-image]][david-url]\n[![iojs version][iojs-image]][iojs-url]\n[![node version][node-image]][node-url]\n[![npm download][download-image]][download-url]\n\n[npm-image]: https://img.shields.io/npm/v/koa-session.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/koa-session\n[travis-image]: https://img.shields.io/travis/koajs/session.svg?style=flat-square\n[travis-url]: https://travis-ci.org/koajs/session\n[coveralls-image]: https://img.shields.io/coveralls/koajs/session.svg?style=flat-square\n[coveralls-url]: https://coveralls.io/r/koajs/session?branch=master\n[gittip-image]: https://img.shields.io/gittip/fengmk2.svg?style=flat-square\n[gittip-url]: https://www.gittip.com/fengmk2/\n[david-image]: https://img.shields.io/david/koajs/session.svg?style=flat-square\n[david-url]: https://david-dm.org/koajs/session\n[iojs-image]: https://img.shields.io/badge/io.js-%3E=_1.0-yellow.svg?style=flat-square\n[iojs-url]: http://iojs.org/\n[node-image]: https://img.shields.io/badge/node.js-%3E=_7.6-green.svg?style=flat-square\n[node-url]: http://nodejs.org/download/\n[download-image]: https://img.shields.io/npm/dm/koa-session.svg?style=flat-square\n[download-url]: https://npmjs.org/package/koa-session\n\n Simple session middleware for Koa. Defaults to cookie-based sessions and supports external stores.\n\n *Requires Node 7.6 or greater for async/await support*\n\n## Installation\n\n```js\n$ npm install koa-session\n```\n\n## Example\n\n  View counter example:\n\n```js\nconst session = require('koa-session');\nconst Koa = require('koa');\nconst app = new Koa();\n\napp.keys = ['some secret hurr'];\n\nconst CONFIG = {\n  key: 'koa:sess', /** (string) cookie key (default is koa:sess) */\n  /** (number || 'session') maxAge in ms (default is 1 days) */\n  /** 'session' will result in a cookie that expires when session/browser is closed */\n  /** Warning: If a session cookie is stolen, this cookie will never expire */\n  maxAge: 86400000,\n  autoCommit: true, /** (boolean) automatically commit headers (default true) */\n  overwrite: true, /** (boolean) can overwrite or not (default true) */\n  httpOnly: true, /** (boolean) httpOnly or not (default true) */\n  signed: true, /** (boolean) signed or not (default true) */\n  rolling: false, /** (boolean) Force a session identifier cookie to be set on every response. The expiration is reset to the original maxAge, resetting the expiration countdown. (default is false) */\n  renew: false, /** (boolean) renew session when session is nearly expired, so we can always keep user logged in. (default is false)*/\n};\n\napp.use(session(CONFIG, app));\n// or if you prefer all default config, just use => app.use(session(app));\n\napp.use(ctx => {\n  // ignore favicon\n  if (ctx.path === '/favicon.ico') return;\n\n  let n = ctx.session.views || 0;\n  ctx.session.views = ++n;\n  ctx.body = n + ' views';\n});\n\napp.listen(3000);\nconsole.log('listening on port 3000');\n```\n\n## API\n\n### Options\n\n  The cookie name is controlled by the `key` option, which defaults\n  to \"koa:sess\". All other options are passed to `ctx.cookies.get()` and\n  `ctx.cookies.set()` allowing you to control security, domain, path,\n  and signing among other settings.\n\n#### Custom `encode/decode` Support\n\n  Use `options.encode` and `options.decode` to customize your own encode/decode methods.\n\n### Hooks\n\n  - `valid()`: valid session value before use it\n  - `beforeSave()`: hook before save session\n\n### External Session Stores\n\n  The session is stored in a cookie by default, but it has some disadvantages:\n\n  - Session is stored on client side unencrypted\n  - [Browser cookies always have length limits](http://browsercookielimits.squawky.net/)\n\n\n  You can store the session content in external stores (Redis, MongoDB or other DBs) by passing `options.store` with three methods (these need to be async functions):\n\n  - `get(key, maxAge, { rolling })`: get session object by key\n  - `set(key, sess, maxAge, { rolling, changed })`: set session object for key, with a `maxAge` (in ms)\n  - `destroy(key)`: destroy session for key\n\n\n  Once you pass `options.store`, session storage is dependent on your external store -- you can't access the session if your external store is down. **Use external session stores only if necessary, avoid using session as a cache, keep the session lean, and store it in a cookie if possible!**\n\n\n  The way of generating external session id is controlled by the `options.genid`, which defaults to `Date.now() + '-' + uid.sync(24)`.\n\n  If you want to add prefix for all external session id, you can use `options.prefix`, it will not work if `options.genid` present.\n\n  If your session store requires data or utilities from context, `opts.ContextStore` is also supported. `ContextStore` must be a class which claims three instance methods demonstrated above. `new ContextStore(ctx)` will be executed on every request.\n\n### Events\n\n`koa-session` will emit event on `app` when session expired or invalid:\n\n- `session:missed`: can't get session value from external store.\n- `session:invalid`: session value is invalid.\n- `session:expired`: session value is expired.\n\n### Custom External Key \n\nExternal key is used the cookie by default, but you can use `options.externalKey` to customize your own external key methods. `options.externalKey` with two methods:\n\n- `get(ctx)`: get the external key\n- `set(ctx, value)`: set the external key\n\n### Session#isNew\n\n  Returns __true__ if the session is new.\n\n```js\nif (this.session.isNew) {\n  // user has not logged in\n} else {\n  // user has already logged in\n}\n```\n\n### Session#maxAge\n\n  Get cookie's maxAge.\n\n### Session#maxAge=\n\n  Set cookie's maxAge.\n\n### Session#save()\n\n  Save this session no matter whether it is populated.\n\n### Session#manuallyCommit()\n\n  Session headers are auto committed by default. Use this if `autoCommit` is set to `false`.\n\n### Destroying a session\n\n  To destroy a session simply set it to `null`:\n\n```js\nthis.session = null;\n```\n\n## License\n\n  MIT\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/koajs/session.git"
  },
  "scripts": {
    "lint": "eslint lib test index.js",
    "test": "npm run lint && NODE_ENV=test mocha --require should --reporter spec test/*.test.js",
    "test-cov": "NODE_ENV=test node ./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --require should test/*.test.js",
    "test-travis": "npm run lint && NODE_ENV=test node ./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha --report lcovonly -- --require should test/*.test.js"
  },
  "version": "5.10.1"
}
