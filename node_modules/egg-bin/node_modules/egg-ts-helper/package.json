{
  "_args": [
    [
      {
        "raw": "egg-ts-helper@^1.25.2",
        "scope": null,
        "escapedName": "egg-ts-helper",
        "name": "egg-ts-helper",
        "rawSpec": "^1.25.2",
        "spec": ">=1.25.2 <2.0.0",
        "type": "range"
      },
      "F:\\liuxin\\egg-project\\node_modules\\egg-bin"
    ]
  ],
  "_from": "egg-ts-helper@^1.25.2",
  "_hasShrinkwrap": false,
  "_id": "egg-ts-helper@1.25.2",
  "_location": "/egg-bin/egg-ts-helper",
  "_nodeVersion": "8.4.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/egg-ts-helper_1.25.2_1553591166019_0.06576420525423332"
  },
  "_npmUser": {
    "name": "wanghx",
    "email": "whxaxes@gmail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {
    "array-union": "1.0.2",
    "dir-glob": "2.0.0",
    "fast-glob": "2.2.6",
    "glob": "7.1.3",
    "ignore": "3.3.10",
    "ms": "2.1.1",
    "pify": "3.0.0",
    "slash": "1.0.0"
  },
  "_requested": {
    "raw": "egg-ts-helper@^1.25.2",
    "scope": null,
    "escapedName": "egg-ts-helper",
    "name": "egg-ts-helper",
    "rawSpec": "^1.25.2",
    "spec": ">=1.25.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/egg-bin"
  ],
  "_resolved": "https://registry.npmjs.org/egg-ts-helper/-/egg-ts-helper-1.25.2.tgz",
  "_shasum": "4fc0165773e73ec849c5630bf2c16e369e1ca482",
  "_shrinkwrap": null,
  "_spec": "egg-ts-helper@^1.25.2",
  "_where": "F:\\liuxin\\egg-project\\node_modules\\egg-bin",
  "author": {
    "name": "wanghx"
  },
  "bin": {
    "ets": "dist/bin.js"
  },
  "bugs": {
    "url": "https://github.com/whxaxes/egg-ts-helper/issues"
  },
  "dependencies": {
    "cache-require-paths": "^0.3.0",
    "chalk": "^2.4.2",
    "chokidar": "^2.0.1",
    "commander": "^2.15.1",
    "debug": "^3.1.0",
    "dot-prop": "^4.2.0",
    "enquirer": "^2.3.0",
    "globby": "^8.0.1",
    "mkdirp": "^0.5.1",
    "ts-node": "^7.0.0",
    "tslib": "^1.9.3",
    "typescript": "^3.0.0",
    "yn": "^3.0.0"
  },
  "description": "egg typescript helper",
  "devDependencies": {
    "@types/chokidar": "^1.7.4",
    "@types/commander": "^2.12.2",
    "@types/debug": "^0.0.30",
    "@types/del": "^3.0.0",
    "@types/globby": "^6.1.0",
    "@types/mkdirp": "^0.5.2",
    "@types/mocha": "^5.0.0",
    "@types/node": "^9.4.5",
    "@types/power-assert": "^1.4.29",
    "del": "^3.0.0",
    "del-cli": "^1.1.0",
    "egg": "^2.10.0",
    "egg-bin": "^4.3.7",
    "egg-mock": "^3.21.0",
    "egg-sequelize": "^4.3.1",
    "extend2": "^1.0.0",
    "runscript": "^1.3.0",
    "tslint": "^5.9.1",
    "tslint-config-egg": "^1.0.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-CwUobKf9aQNPTkyzzeFqGs3fRXygUvr9dnoMahh1jX0b9X9znP/1KUanab9qvZPUc4FnzaOMgAyZSawWHbQElQ==",
    "shasum": "4fc0165773e73ec849c5630bf2c16e369e1ca482",
    "tarball": "https://registry.npmjs.org/egg-ts-helper/-/egg-ts-helper-1.25.2.tgz",
    "fileCount": 78,
    "unpackedSize": 176236,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcmet+CRA9TVsSAnZWagAAzr4P/17aE6kVxr30IkQnQa0s\nArMkY9f5r/nrl/G5guOrZ4g3LZkP/tPHyPMVF0CwkSybU7n9lTbw+7U192Kn\n0l2m0JpuYSpB/Vkpq1s3Kz7lcukpqpazHioxXSMXsH6+SJ/5Fxz5rhRSE2FK\nQUQxQFafFK6lIAU1iQRpXT9f0zqPKZ7mpVq8SaC4TRinCmqQhLe6G24GQIMz\nYd+Gr4eC/KTWBxUhTDIp4RYmc3w36A9GEHedQmdamM9kJsPcIRplJXVDNEqg\nnVa8WbmwTLCLtlMMzqSXCnyF5oQWD9JLwCH65YUdd2T5Fcv4W64YObHC/8Yj\nGn5o7VMu3IAbC/KJ+aksRkvdZnND/LCNF+v38g6T+mw0akPVDobBU04sqYXY\nx6eSB4SXSFUjFHkPGMKMvzKquFor7J1CL7OcMAR9lNuVxRx7WMH5vsfnul7E\nh3Lz4UMBS2Lh9HnAstuDEqsU9+SOnRUsK+UhHSHBfXiW1h0KYgrBPlt9T0UO\nKbTAMrGMXzIgLm3h5/XB7zKBX+ApThT68FHPgzeG7Ors3OxMnpaKP/AknG1+\nWPolS3Q+Ypj3Mk51Vh48gpuWj0wlacLM7gikAIvdQR6M8eaIhSVmH38QChDy\nu/h7FL8izgaQKaeotWCywRviBOk4VtNZZZVrZolrS1IY8W1ZsxK5eUs4hOV1\nPRUW\r\n=G9gm\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "dist",
    "register.js"
  ],
  "gitHead": "7e11703a0b897d4ac361b396a6f398604c2e3813",
  "homepage": "https://github.com/whxaxes/egg-ts-helper#readme",
  "keywords": [
    "egg",
    "typescript"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "wanghx",
      "email": "whxaxes@gmail.com"
    }
  ],
  "name": "egg-ts-helper",
  "optionalDependencies": {},
  "publishConfig": {
    "registry": "https://registry.npmjs.org/"
  },
  "readme": "# egg-ts-helper\n\n[![NPM version][npm-image]][npm-url]\n[![Package Quality](http://npm.packagequality.com/shield/egg-ts-helper.svg)](http://packagequality.com/#?package=egg-ts-helper)\n[![Build Status][travis-image]][travis-url]\n[![Appveyor status][appveyor-image]][appveyor-url]\n[![Test coverage][codecov-image]][codecov-url]\n[![NPM download][download-image]][download-url]\n\n[npm-image]: https://img.shields.io/npm/v/egg-ts-helper.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/egg-ts-helper\n[travis-url]: https://travis-ci.org/whxaxes/egg-ts-helper\n[travis-image]: http://img.shields.io/travis/whxaxes/egg-ts-helper.svg\n[appveyor-url]: https://ci.appveyor.com/project/whxaxes/egg-ts-helper/branch/master\n[appveyor-image]: https://ci.appveyor.com/api/projects/status/github/whxaxes/egg-ts-helper?branch=master&svg=true\n[codecov-image]: https://codecov.io/gh/whxaxes/egg-ts-helper/branch/master/graph/badge.svg\n[codecov-url]: https://codecov.io/gh/whxaxes/egg-ts-helper\n[download-image]: https://img.shields.io/npm/dm/egg-ts-helper.svg?style=flat-square\n[download-url]: https://npmjs.org/package/egg-ts-helper\n[easter-image]: https://img.shields.io/badge/easter%20egg-none-brightgreen.svg?style=flat-square\n\nA simple tool for creating `d.ts` in [egg](https://eggjs.org) application. Injecting `controller, proxy, service, etc.` to definition type of egg ( such as `Context` `Application` etc. ) by [Declaration Merging](https://www.typescriptlang.org/docs/handbook/declaration-merging.html), and making IntelliSense works in both egg-js and egg-ts.\n\n\n## Install\n\nopen your application and install.\n\n```\nnpm i egg-ts-helper --save-dev\n```\n\nor\n\n```\nyarn add egg-ts-helper --dev\n```\n\n## QuickStart\n\nOpen your egg application, executing ets by [npx](https://github.com/zkat/npx)\n\n```\n$ npx ets\n```\n\nWatching files by `-w` flag.\n\n```\n$ npx ets -w\n```\n\n`egg-ts-helper` has build-in in `egg-bin`, You can easily to use it by\n\n```\n$ egg-bin dev --dts\n```\n\nor add configuration `egg.declarations` in `package.json`\n\n## CLI\n\n```\n$ ets -h\n\n  Usage: bin [commands] [options]\n\n  Options:\n    -v, --version           output the version number\n    -w, --watch             Watching files, d.ts would recreated while file changed\n    -c, --cwd [path]        Egg application base dir (default: process.cwd)\n    -C, --config [path]     Configuration file, The argument can be a file path to a valid JSON/JS configuration file.（default: {cwd}/tshelper\n    -o, --oneForAll [path]  Create a d.ts import all types (default: typings/ets.d.ts)\n    -s, --silent            Running without output\n    -i, --ignore [dirs]     Ignore watchDirs, your can ignore multiple dirs with comma like: -i controller,service\n    -e, --enabled [dirs]    Enable watchDirs, your can enable multiple dirs with comma like: -e proxy,other\n    -E, --extra [json]      Extra config, the value should be json string\n    -h, --help              output usage information\n\n  Commands:\n    clean                   Clean js file while it has the same name ts/tsx file\n    init <type>             Init egg-ts-helper in your existing project\n```\n\n## Configuration\n\n| name | type | default | description |\n| --- | --- | --- | --- |\n| cwd | `string` | process.cwd | egg application base dir |\n| typings | `string` | {cwd}/typings | typings dir |\n| caseStyle | `string` `Function` | lower | egg case style(lower,upper,camel) or `(filename) => {return 'YOUR_CASE'}`|\n| silent | `boolean` | false | ignore logging |\n| watch | `boolean` | false | watch file change or not, default to `true` in `register`  |\n| watchOptions | `object` | undefined | chokidar [options](https://github.com/paulmillr/chokidar#api) |\n| configFile | `string` | {cwd}/tshelper.(js|json) | configure file path |\n| watchDirs | `object` | | generator configuration |\n\nYou can configure the options above in `./tshelper.js` `./tshelper.json` or `package.json`.\n\nIn `tshelper.js`\n\n```js\n// {cwd}/tshelper.js\n\nmodule.exports = {\n  watchDirs: {\n    model: {\n      enabled: true,\n      generator: \"function\",\n      interfaceHandle: \"InstanceType<{{ 0 }}>\"\n    },\n  }\n}\n```\n\nIn `tshelper.json`\n\n```json\n// {cwd}/tshelper.json\n\n{\n  \"watchDirs\": {\n    \"model\": {\n      \"enabled\": true,\n      \"generator\": \"function\",\n      \"interfaceHandle\": \"InstanceType<{{ 0 }}>\"\n    },\n  }\n}\n```\n\nIn `package.json`\n\n```json\n// {cwd}/package.json\n\n{\n  \"egg\": {\n    \"framework\": \"egg\",\n    \"tsHelper\": {\n      \"watchDirs\": {\n        \"model\": {\n          \"enabled\": true,\n          \"generator\": \"function\",\n          \"interfaceHandle\": \"InstanceType<{{ 0 }}>\"\n        }\n      }\n    }\n  }\n}\n```\n\nor use `dot-prop`\n\n```json\n// {cwd}/package.json\n\n{\n  \"egg\": {\n    \"framework\": \"egg\",\n    \"tsHelper\": {\n      \"watchDirs.model\": {\n        \"enabled\": true,\n        \"generator\": \"function\",\n        \"interfaceHandle\": \"InstanceType<{{ 0 }}>\"\n      }\n    }\n  }\n}\n```\n\nAlso you can pass options by env ( support since 1.22.0 )\n\n- `ETS_CWD`: cwd\n- `ETS_FRAMEWORK`: framework\n- `ETS_TYPINGS`: typings\n- `ETS_CASE_STYLE`: caseStyle\n- `ETS_AUTO_REMOVE_JS`: autoRemoveJs\n- `ETS_THROTTLE`: throttle\n- `ETS_WATCH`: watch\n- `ETS_SILENT`: silent\n- `ETS_CONFIG_FILE`: configFile\n\n## Custom Loader\n\n> Support since 1.24.0\n\n`egg-ts-helper` support customLoader configuration of egg. see https://github.com/eggjs/egg/issues/3480 \n\nConfigure in `config.default.ts`\n\n```typescript\n'use strict';\n\nimport { EggAppConfig, PowerPartial } from 'egg';\n\nexport default function(appInfo: EggAppConfig) {\n  const config = {} as PowerPartial<EggAppConfig>;\n\n  config.keys = appInfo.name + '123123';\n\n  config.customLoader = {\n    model: {\n      directory: 'app/model',\n      inject: 'app',\n      caseStyle: 'upper',\n    },\n  };\n\n  return {\n    ...config as {},\n    ...bizConfig,\n  };\n}\n```\n\n`egg-ts-helper` will auto create the d.ts for files under `app/model`\n\n```typescript\n// This file is created by egg-ts-helper@1.24.1\n// Do not modify this file!!!!!!!!!\n\nimport 'egg';\ntype AutoInstanceType<T, U = T extends (...args: any[]) => any ? ReturnType<T> : T> = U extends { new (...args: any[]): any } ? InstanceType<U> : U;\nimport ExportCastle from '../../../app/model/Castle';\nimport ExportUser from '../../../app/model/User';\n\ndeclare module 'egg' {\n  interface Application {\n    model: T_custom_model;\n  }\n\n  interface T_custom_model {\n    Castle: AutoInstanceType<typeof ExportCastle>;\n    User: AutoInstanceType<typeof ExportUser>;\n  }\n}\n```\n\nAnd you can easily to use it in your code.\n\n![image](https://user-images.githubusercontent.com/5856440/54109111-b4848b80-4418-11e9-9da5-77b342f7f814.png)\n\n## Generator\n\nIf you are using `loader.loadToApp` or `loader.loadToContext` to load the instance, you should use generator config.\n\n### Example\n\nCreating `d.ts` for files under `app/model`. You should add config `watchDirs.model` in your config file.\n\n```typescript\n// ./tshelper.js\n\nmodule.exports = {\n  watchDirs: {\n    model: {\n      directory: 'app/model', // files directory.\n      // pattern: '**/*.(ts|js)', // glob pattern, default is **/*.(ts|js). it doesn't need to configure normally.\n      // ignore: '', // ignore glob pattern, default to empty.\n      generator: 'class', // generator name, eg: class、auto、function、object\n      interface: 'IModel',  // interface name\n      declareTo: 'Context.model', // declare to this interface\n      // watch: true, // whether need to watch files\n      // caseStyle: 'upper', // caseStyle for loader\n      // interfaceHandle: val => `ReturnType<typeof ${val}>`, // interfaceHandle\n      // trigger: ['add', 'unlink'], // recreate d.ts when receive these events, all events: ['add', 'unlink', 'change']\n    }\n  }\n}\n```\n\nThe configuration can create d.ts as below.\n\n> Attention, The type will merge into egg without any pre handling if the generator field is `class`, If you dont know how it works, just using `generator: 'auto'` instead.\n\n```typescript\nimport Station from '../../../app/model/station';// <-- find all files under app/model and import then.\n\ndeclare module 'egg' {\n  interface Context { // <-- Context is reading from `declareTo`\n    model: IModel; // <-- IModel is reading from `interface`, It will create a random interface if this field is empty\n  }\n\n  interface IModel { // <-- The same as above.\n    Station: Station; // <-- Merging `Station` to IModel so we can use `ctx.model.Station` in code.\n  }\n}\n```\n\n### Effect of different options\n\n#### interface `string`\n\n`interface` set to `IOther`.\n\n```typescript\ninterface IOther {\n  Station: Station;\n}\n```\n\nIt will use random interface if `interface` is not set.\n\n```typescript\ninterface T100 {\n  Station: Station;\n}\n```\n\nAttentions: Must set `declareTo` if `interface` is not set.\n\n#### generator `string`\n\nThe name of generator, available value is `class` `function` `object` `auto`.\n\n**`generator: 'class'`**\n\nthe types created by `class` generator as below\n\n```typescript\ninterface IModel {\n  Station: Station;\n}\n```\n\nIt's suitable for module wrote like this\n\n```typescript\nexport default class XXXController extends Controller { }\n```\n\n**`generator: 'function'`** ( Support since `1.16.0` )\n\nthe types created by `function` generator as below\n\n```typescript\ninterface IModel {\n  Station: ReturnType<typeof Station>; // Using ReturnType to get return type of function.\n}\n```\n\nIt's suitable for module like this\n\n```typescript\nexport default () => {\n  return {};\n}\n```\n\n**`generator: 'object'`** ( Support since `1.16.0` )\n\nthe types created by `object` generator as below.\n\n```typescript\ninterface IModel {\n  Station: typeof Station;\n}\n```\n\nIt's suitable for module like this\n\n```typescript\nexport default {}\n```\n\n**`generator: 'auto'`** ( Support since `1.19.0` )\n\nthe types created by `auto` generator as below. It will check types automatically.\n\n```typescript\ntype AutoInstanceType<T, U = T extends (...args: any[]) => any ? ReturnType<T> : T> = U extends { new (...args: any[]): any } ? InstanceType<U> : U;\n\ninterface IModel {\n  Station: AutoInstanceType<typeof Station>;\n}\n```\n\nIt's suitable for every module in above.\n\n#### interfaceHandle `function|string`\n\nIf you cannot find suitable generator in above, you can config the type by this field.\n\n```js\nmodule.exports = {\n  watchDirs: {\n    model: {\n      ...\n\n      interfaceHandle: val => `${val} & { [key: string]: any }`,\n    }\n  }\n}\n```\n\nThe generated typings.\n\n```typescript\ninterface IModel {\n  Station: Station & { [key: string]: any };\n}\n```\n\nThe type of `interfaceHandle` can be `string` ( Support since `1.18.0` )\n\n```js\nmodule.exports = {\n  watchDirs: {\n    model: {\n      ...\n\n      interfaceHandle: '{{ 0 }} & { [key: string]: any }',\n    }\n  }\n}\n```\n\nThe generated typings are the same as above. `{{ 0 }}` means the first argument in function.\n\n#### caseStyle `function|string`\n\n`caseStyle` can set to `lower`、`upper`、`camel` or function\n\n#### declareTo `string`\n\nDeclaring interface to definition of egg. ( Support since `1.15.0` )\n\n`declareTo` set to `Context.model` , and you can get intellisense by `ctx.model.xxx`\n\n```typescript\nimport Station from '../../../app/model/station';\n\ndeclare module 'egg' {\n  interface Context {\n    model: IModel;\n  }\n\n  interface IModel {\n    Station: Station;\n  }\n}\n```\n\n`declareTo` set to `Application.model.subModel`, and you can get intellisense by `app.model.subModel.xxx`\n\n```typescript\nimport Station from '../../../app/model/station';\n\ndeclare module 'egg' {\n  interface Application {\n    model: {\n      subModel: IModel;\n    }\n  }\n\n  interface IModel {\n    Station: Station;\n  }\n}\n```\n\n### Defining custom generator\n\n```javascript\n// ./tshelper.js\n\n// custom generator\nfunction myGenerator(config, baseConfig) {\n  // config.dir       dir\n  // config.dtsDir    d.ts dir\n  // config.file      changed file\n  // config.fileList  file list\n  console.info(config);\n  console.info(baseConfig);\n\n  // return type can be object or array { dist: string; content: string } | Array<{ dist: string; content: string }>\n  // egg-ts-helper will remove dist file when content is undefined.\n  return {\n    dist: 'd.ts file url',\n    content: 'd.ts content'\n  }\n}\n\nmodule.exports = {\n  watchDirs: {\n    model: {\n      directory: 'app/model',\n      generator: myGenerator,\n      trigger: ['add', 'unlink'],\n    }\n  }\n}\n```\n\nor define generator to other js.\n\n```javascript\n// ./my-generator.js\n\nmodule.exports.defaultConfig = {\n  // default watchDir config\n}\n\n// custom generator\nmodule.exports = (config, baseConfig) => {\n  // config.dir       dir\n  // config.dtsDir    d.ts dir\n  // config.file      changed file\n  // config.fileList  file list\n  console.info(config);\n  console.info(baseConfig);\n\n  // return type can be object or array { dist: string; content: string } | Array<{ dist: string; content: string }>\n  // egg-ts-helper will remove dist file when content is undefined.\n  return {\n    dist: 'd.ts file url',\n    content: 'd.ts content'\n  }\n}\n```\n\nconfigure in `tshelper.js` or `package.json`\n\n```js\n// ./tshelper.js\n\nmodule.exports = {\n  watchDirs: {\n    model: {\n      directory: 'app/model',\n      generator: './my-generator',\n      trigger: ['add', 'unlink'],\n    }\n  }\n}\n```\n\n## Demo\n\n`egg-ts-helper` can works in both `ts` and `js` egg project.\n\nTS demo: https://github.com/whxaxes/egg-boilerplate-d-ts\n\nJS demo: https://github.com/whxaxes/egg-boilerplate-d-js\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/whxaxes/egg-ts-helper.git"
  },
  "scripts": {
    "build": "tsc -d",
    "build:w": "tsc -d -w",
    "check": "npm run build && npm run lint",
    "cov": "npm run check && egg-bin cov --ts",
    "lint": "tslint ./src/**/*.ts ./test/**/*.test.ts",
    "prepublish": "npm run release",
    "release": "del dist && npm run build",
    "test": "npm run check && npm run test-local",
    "test-local": "egg-bin test --ts"
  },
  "types": "dist/index.d.ts",
  "version": "1.25.2"
}
