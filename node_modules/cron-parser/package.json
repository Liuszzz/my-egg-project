{
  "_args": [
    [
      {
        "raw": "cron-parser@^2.4.4",
        "scope": null,
        "escapedName": "cron-parser",
        "name": "cron-parser",
        "rawSpec": "^2.4.4",
        "spec": ">=2.4.4 <3.0.0",
        "type": "range"
      },
      "F:\\liuxin\\egg-project\\node_modules\\egg-schedule"
    ]
  ],
  "_from": "cron-parser@^2.4.4",
  "_hasShrinkwrap": false,
  "_id": "cron-parser@2.10.0",
  "_location": "/cron-parser",
  "_nodeVersion": "10.15.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/cron-parser_2.10.0_1553887688410_0.4448485891432854"
  },
  "_npmUser": {
    "name": "harrisiirak",
    "email": "harri@siirak.ee"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cron-parser@^2.4.4",
    "scope": null,
    "escapedName": "cron-parser",
    "name": "cron-parser",
    "rawSpec": "^2.4.4",
    "spec": ">=2.4.4 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/egg-schedule"
  ],
  "_resolved": "https://registry.npmjs.org/cron-parser/-/cron-parser-2.10.0.tgz",
  "_shasum": "d6bed39cfa6163930f89b1ade82df7b46f52b82b",
  "_shrinkwrap": null,
  "_spec": "cron-parser@^2.4.4",
  "_where": "F:\\liuxin\\egg-project\\node_modules\\egg-schedule",
  "author": {
    "name": "Harri Siirak"
  },
  "browser": {
    "fs": false
  },
  "bugs": {
    "url": "https://github.com/harrisiirak/cron-parser/issues"
  },
  "contributors": [
    {
      "name": "Nicholas Clawson"
    },
    {
      "name": "Daniel Prentis",
      "email": "daniel@salsitasoft.com"
    },
    {
      "name": "Renault John Lecoultre"
    },
    {
      "name": "Richard Astbury",
      "email": "richard.astbury@gmail.com"
    },
    {
      "name": "Meaglin Wasabi",
      "email": "Meaglin.wasabi@gmail.com"
    },
    {
      "name": "Mike Kusold",
      "email": "hello@mikekusold.com"
    },
    {
      "name": "Alex Kit",
      "email": "alex.kit@atmajs.com"
    },
    {
      "name": "Santiago Gimeno",
      "email": "santiago.gimeno@gmail.com"
    },
    {
      "name": "Daniel",
      "email": "darc.tec@gmail.com"
    },
    {
      "name": "Christian Steininger",
      "email": "christian.steininger.cs@gmail.com"
    },
    {
      "name": "Mykola Piskovyi",
      "email": "m.piskovyi@gmail.com"
    },
    {
      "name": "Brian Vaughn",
      "email": "brian.david.vaughn@gmail.com"
    },
    {
      "name": "Nicholas Clawson",
      "email": "nickclaw@gmail.com"
    },
    {
      "name": "Yasuhiroki",
      "email": "yasuhiroki.duck@gmail.com"
    },
    {
      "name": "Nicholas Clawson",
      "email": "nickclaw@gmail.com"
    },
    {
      "name": "Brendan Warkentin",
      "email": "faazshift@gmail.com"
    },
    {
      "name": "Charlie Fish",
      "email": "fishcharlie.code@gmail.com"
    }
  ],
  "dependencies": {
    "is-nan": "^1.2.1",
    "moment-timezone": "^0.5.23"
  },
  "description": "Node.js library for parsing crontab instructions",
  "devDependencies": {
    "sinon": "^7.2.7",
    "tap": "^12.6.0"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "integrity": "sha512-E181Gbg+wYT0hSikwBOokL7VHgJDYUlFsRFHIlnTP8GGefhcIyf8PSc2IXztmghj5mhAZupU0n3jKfEpZVEmVg==",
    "shasum": "d6bed39cfa6163930f89b1ade82df7b46f52b82b",
    "tarball": "https://registry.npmjs.org/cron-parser/-/cron-parser-2.10.0.tgz",
    "fileCount": 17,
    "unpackedSize": 79449,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcnnHJCRA9TVsSAnZWagAA66UP/in2DlHrl8WJAge3XKpO\nlTWfluR9gPQDbunZe6NBIFXa6W/QNn0D4XiP3lXmTSPilyUYViQra3Y5La5I\n6uAGeZmG/Oemb659dTBZ/x+dkI6372K5peVLXzo59S+ZFWmD/KVwuIsl7voO\neaKgtA43/mBqhD5xjXnsHQ6Qt/X8WLAA2OB/l+aWM3Dx42xKhbQPGGOdP9dr\ny+sXw8OXVEJjguTVqDMyUkIyDpSbxu6e1FPSvERFbPm7EYjnouPg77eREhog\nFmfJx9Vcaf4Wbvi/Se8LuYBpjDAqC1dWvAtRBUQkrpPA11WbzpF2DtXme1oE\nHg4YZpogGrXGfCfcTKfmFsexkCI6U2aa0KR7XAlx5OCdHJcYf9rVro453cuU\nnPrY7mO7CxNn1dE1BBDeOKSlNe16gjiRHPDMhqR/Hri8htBinTk6APvu72kH\nIJqxHcDVixV8wFF+gte5nIi/9S4d2dH2wQiUEmjRfMbNVLHh0e4jlArZmzhA\nHDAxir/8eb4cVkBDiYcabXGLzlAuQyPgXBQqKageP1Uuq09XyVS73rNx+yhw\n+zdJ72j6XxegMAL1bhQ0HeNonCMAIlHBE67W4M5WAOQ5gbaAKiWT3D03vmPk\nbvAQTc8dQmRUHfKUYOPQ/4mgFxuB+8W6gLrypEfVGYS56rDug+4KDJvKp+vm\nYypX\r\n=FGAZ\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=0.8"
  },
  "gitHead": "8c7a600b0104070c7dca746aa3b03df13c7b1b54",
  "homepage": "https://github.com/harrisiirak/cron-parser#readme",
  "keywords": [
    "cron",
    "crontab",
    "parser"
  ],
  "license": "MIT",
  "main": "lib/parser.js",
  "maintainers": [
    {
      "name": "harrisiirak",
      "email": "harri.siirak@gmail.com"
    }
  ],
  "name": "cron-parser",
  "optionalDependencies": {},
  "readme": "cron-parser\n================\n\n[![Build Status](https://travis-ci.org/harrisiirak/cron-parser.svg?branch=master)](https://travis-ci.org/harrisiirak/cron-parser)\n[![NPM version](https://badge.fury.io/js/cron-parser.png)](http://badge.fury.io/js/cron-parser)\n\nNode.js library for parsing crontab instructions. It includes support for timezones and DST transitions.\n\nSetup\n========\n```bash\nnpm install cron-parser\n```\n\nSupported format\n========\n\n```\n*    *    *    *    *    *\n┬    ┬    ┬    ┬    ┬    ┬\n│    │    │    │    │    |\n│    │    │    │    │    └ day of week (0 - 7) (0 or 7 is Sun)\n│    │    │    │    └───── month (1 - 12)\n│    │    │    └────────── day of month (1 - 31)\n│    │    └─────────────── hour (0 - 23)\n│    └──────────────────── minute (0 - 59)\n└───────────────────────── second (0 - 59, optional)\n```\n\nSupports mixed use of ranges and range increments (L, W and # characters are not supported currently). See tests for examples.\n\nUsage\n========\n\nSimple expression.\n\n```javascript\nvar parser = require('cron-parser');\n\ntry {\n  var interval = parser.parseExpression('*/2 * * * *');\n\n  console.log('Date: ', interval.next().toString()); // Sat Dec 29 2012 00:42:00 GMT+0200 (EET)\n  console.log('Date: ', interval.next().toString()); // Sat Dec 29 2012 00:44:00 GMT+0200 (EET)\n\n  console.log('Date: ', interval.prev().toString()); // Sat Dec 29 2012 00:42:00 GMT+0200 (EET)\n  console.log('Date: ', interval.prev().toString()); // Sat Dec 29 2012 00:40:00 GMT+0200 (EET)\n} catch (err) {\n  console.log('Error: ' + err.message);\n}\n\n```\n\nIteration with limited timespan. Also returns ES6 compatible iterator (when iterator flag is set to true).\n\n```javascript\nvar parser = require('cron-parser');\n\nvar options = {\n  currentDate: new Date('Wed, 26 Dec 2012 12:38:53 UTC'),\n  endDate: new Date('Wed, 26 Dec 2012 14:40:00 UTC'),\n  iterator: true\n};\n\ntry {\n  var interval = parser.parseExpression('*/22 * * * *', options);\n\n  while (true) {\n    try {\n      var obj = interval.next();\n      console.log('value:', obj.value.toString(), 'done:', obj.done);\n    } catch (e) {\n      break;\n    }\n  }\n\n  // value: Wed Dec 26 2012 14:44:00 GMT+0200 (EET) done: false\n  // value: Wed Dec 26 2012 15:00:00 GMT+0200 (EET) done: false\n  // value: Wed Dec 26 2012 15:22:00 GMT+0200 (EET) done: false\n  // value: Wed Dec 26 2012 15:44:00 GMT+0200 (EET) done: false\n  // value: Wed Dec 26 2012 16:00:00 GMT+0200 (EET) done: false\n  // value: Wed Dec 26 2012 16:22:00 GMT+0200 (EET) done: true\n} catch (err) {\n  console.log('Error: ' + err.message);\n}\n\n```\n\nTimezone support\n\n```javascript\nvar parser = require('cron-parser');\n\nvar options = {\n  currentDate: '2016-03-27 00:00:01',\n  tz: 'Europe/Athens'\n};\n\ntry {\n  var interval = parser.parseExpression('0 * * * *', options);\n\n  console.log('Date: ', interval.next().toString()); // Date:  Sun Mar 27 2016 01:00:00 GMT+0200\n  console.log('Date: ', interval.next().toString()); // Date:  Sun Mar 27 2016 02:00:00 GMT+0200\n  console.log('Date: ', interval.next().toString()); // Date:  Sun Mar 27 2016 04:00:00 GMT+0300 (Notice DST transition)\n} catch (err) {\n  console.log('Error: ' + err.message);\n}\n```\n\nOptions\n========\n\n* *currentDate* - Start date of the iteration\n* *endDate* - End date of the iteration\n\n`currentDate` and `endDate` accept `string`, `integer` and `Date` as input.\n\nIn case of using `string` as input, not every string format accepted\nby the `Date` constructor will work correctly. The supported formats are: [`ISO8601`](http://momentjs.com/docs/#/parsing/string/) and the older\n[`ASP.NET JSON Date`](http://momentjs.com/docs/#/parsing/asp-net-json-date/) format. The reason being that those are the formats accepted by the\n[`moment`](http://momentjs.com) library which is being used to handle dates.\n\nUsing `Date` as an input can be problematic specially when using the `tz` option. The issue being that, when creating a new `Date` object without\nany timezone information, it will be created in the timezone of the system that is running the code. This (most of times) won't be what the user\nwill be expecting. Using one of the supported `string` formats will solve the issue(see timezone example).\n\n* *iterator* - Return ES6 compatible iterator object \n* *utc* - Enable UTC\n* *tz* - Timezone string. It won't be used in case `utc` is enabled\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/harrisiirak/cron-parser.git"
  },
  "scripts": {
    "test": "tap ./test/*.js"
  },
  "types": "lib/index.d.ts",
  "version": "2.10.0"
}
