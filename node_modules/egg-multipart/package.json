{
  "_args": [
    [
      {
        "raw": "egg-multipart@^2.4.0",
        "scope": null,
        "escapedName": "egg-multipart",
        "name": "egg-multipart",
        "rawSpec": "^2.4.0",
        "spec": ">=2.4.0 <3.0.0",
        "type": "range"
      },
      "F:\\liuxin\\egg-project\\node_modules\\egg"
    ]
  ],
  "_from": "egg-multipart@^2.4.0",
  "_hasShrinkwrap": false,
  "_id": "egg-multipart@2.4.0",
  "_location": "/egg-multipart",
  "_nodeVersion": "10.3.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/egg-multipart_2.4.0_1545809434277_0.4454291778642454"
  },
  "_npmUser": {
    "name": "dead_horse",
    "email": "dead_horse@qq.com"
  },
  "_npmVersion": "5.8.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "egg-multipart@^2.4.0",
    "scope": null,
    "escapedName": "egg-multipart",
    "name": "egg-multipart",
    "rawSpec": "^2.4.0",
    "spec": ">=2.4.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/egg"
  ],
  "_resolved": "https://registry.npmjs.org/egg-multipart/-/egg-multipart-2.4.0.tgz",
  "_shasum": "727e5afdb87118e3668dd7833d1aee9cbcbd53a8",
  "_shrinkwrap": null,
  "_spec": "egg-multipart@^2.4.0",
  "_where": "F:\\liuxin\\egg-project\\node_modules\\egg",
  "author": {
    "name": "gxcsoccer",
    "email": "gxcsoccer@126.com"
  },
  "bugs": {
    "url": "https://github.com/eggjs/egg/issues"
  },
  "ci": {
    "type": "travis, azure-pipelines",
    "command": {
      "azure-pipelines": "ci-windows"
    },
    "version": "8, 10",
    "license": {
      "year": 2017
    }
  },
  "dependencies": {
    "co-busboy": "^1.4.0",
    "humanize-bytes": "^1.0.1",
    "moment": "^2.22.2",
    "mz": "^2.7.0",
    "mz-modules": "^2.1.0",
    "stream-wormhole": "^1.1.0",
    "uuid": "^3.3.2"
  },
  "description": "multipart plugin for egg",
  "devDependencies": {
    "autod": "^3.0.1",
    "egg": "^2.11.2",
    "egg-bin": "^4.9.0",
    "egg-ci": "^1.9.2",
    "egg-mock": "^3.20.1",
    "eslint": "^5.6.0",
    "eslint-config-egg": "^7.1.0",
    "formstream": "^1.1.0",
    "is-type-of": "^1.0.0",
    "urllib": "^2.30.0",
    "webstorm-disable-index": "^1.2.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-FEjH3THuXWdj1FMnwqcJ+nBRQytmbKya9qKKkLBVUTIb0fcPvUe8fgiYFJVEJlxs3ytgWPRioo19k/ffGW0jng==",
    "shasum": "727e5afdb87118e3668dd7833d1aee9cbcbd53a8",
    "tarball": "https://registry.npmjs.org/egg-multipart/-/egg-multipart-2.4.0.tgz",
    "fileCount": 9,
    "unpackedSize": 29408,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcIy4aCRA9TVsSAnZWagAATI8P/1z5HlWrIDgTxjxdoF9P\nXElngt5i//sTXz6vI54DdCH44vOXOFeAhPxL0aaee5waHKzTky27Z9IMnaRx\njAXj4vuCmoCMnXo+p/SBE7cXFILhGyJrE+NRZQOqOprgzP82Wei+ivnfPAG1\n8po4Kzd7ZajG/Hzbk2lNVn+cF4SCUOFg1LPxYEMN8jv7COKFPpybI93bsGEE\nO3H8yUU+RQQuu+SHChDFcnr1XHV3B2PmH9QF9W9wNuegKuiYvIn9Wp/50Y6z\nOfz56bLF7oWaiqy4knGENSn943sxCvNEEFBXDuVstTTcq+a8jgzBKXxmwuNS\nbkF73sX1SLifhSnIU+XNQulCgXwwxxRcizLH5Em/nZo2wa0Fdf8Gn2PhBnib\ngGRFzuc1v5IuLLqhSLrRd+q8Q+mqs1Y5y+nYJnlJKBwGOYpNu04+Esv0Bgfa\nvNA3eoF5zd/126/cKGOufSkQCF4dwNAfPc6/RppusSPg8a3uY88w/Q8Esj4C\ndQ5DxXPOlEeHJ1gDxhZ6Wd8mlLh3zKPrr5fCE2NuakWDzj2EpIMIVQO2XQ+q\nbSrc/EWLT7wXTGtufzcxvmlE6SBDu2kJh/nOvLEXY5u1Fl+quXyAW2MyklvH\nZJUTYoQsnPJOL32qX/Edjg8EKX9NpuhnSkyZk6s3FWn3kIWNwAwdyN0kRvct\nIVgL\r\n=DOav\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "eggPlugin": {
    "name": "multipart",
    "optionalDependencies": [
      "schedule"
    ]
  },
  "engines": {
    "node": ">= 8.0.0"
  },
  "files": [
    "app",
    "config",
    "app.js"
  ],
  "gitHead": "f266d348abb96dd38352bdd855f1b288da09d877",
  "homepage": "https://github.com/eggjs/egg-multipart#readme",
  "keywords": [
    "egg",
    "egg-plugin",
    "eggPlugin",
    "multipart"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "atian25",
      "email": "atian25@qq.com"
    },
    {
      "name": "dead_horse",
      "email": "dead_horse@qq.com"
    },
    {
      "name": "fengmk2",
      "email": "fengmk2@gmail.com"
    },
    {
      "name": "gxcsoccer",
      "email": "gxcsoccer@126.com"
    },
    {
      "name": "popomore",
      "email": "sakura9515@gmail.com"
    }
  ],
  "name": "egg-multipart",
  "optionalDependencies": {},
  "readme": "# egg-multipart\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![Build Status](https://dev.azure.com/eggjs/egg/_apis/build/status/eggjs.egg-multipart)](https://dev.azure.com/eggjs/egg/_build/latest?definitionId=8)\n[![Test coverage][codecov-image]][codecov-url]\n[![David deps][david-image]][david-url]\n[![Known Vulnerabilities][snyk-image]][snyk-url]\n[![npm download][download-image]][download-url]\n\n[npm-image]: https://img.shields.io/npm/v/egg-multipart.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/egg-multipart\n[travis-image]: https://img.shields.io/travis/eggjs/egg-multipart.svg?style=flat-square\n[travis-url]: https://travis-ci.org/eggjs/egg-multipart\n[codecov-image]: https://codecov.io/github/eggjs/egg-multipart/coverage.svg?branch=master\n[codecov-url]: https://codecov.io/github/eggjs/egg-multipart?branch=master\n[david-image]: https://img.shields.io/david/eggjs/egg-multipart.svg?style=flat-square\n[david-url]: https://david-dm.org/eggjs/egg-multipart\n[snyk-image]: https://snyk.io/test/npm/egg-multipart/badge.svg?style=flat-square\n[snyk-url]: https://snyk.io/test/npm/egg-multipart\n[download-image]: https://img.shields.io/npm/dm/egg-multipart.svg?style=flat-square\n[download-url]: https://npmjs.org/package/egg-multipart\n\nUse [co-busboy](https://github.com/cojs/busboy) to upload file by streaming and\nprocess it without save to disk(using the `stream` mode).\n\nJust use `ctx.multipart()` to got file stream, then pass to image processing liberary such as `gm` or upload to cloud storage such as `oss`.\n\n## Whitelist of file extensions\n\nFor security, if uploading file extension is not in white list, will response as `400 Bad request`.\n\nDefault Whitelist:\n\n```js\nconst whitelist = [\n  // images\n  '.jpg', '.jpeg', // image/jpeg\n  '.png', // image/png, image/x-png\n  '.gif', // image/gif\n  '.bmp', // image/bmp\n  '.wbmp', // image/vnd.wap.wbmp\n  '.webp',\n  '.tif',\n  '.psd',\n  // text\n  '.svg',\n  '.js', '.jsx',\n  '.json',\n  '.css', '.less',\n  '.html', '.htm',\n  '.xml',\n  // tar\n  '.zip',\n  '.gz', '.tgz', '.gzip',\n  // video\n  '.mp3',\n  '.mp4',\n  '.avi',\n];\n```\n\n### fileSize\n\nThe default fileSize that multipart can accept is `10mb`. if you upload a large file, you should specify this config.\n\n```js\n// config/config.default.js\nexports.multipart = {\n  fileSize: '50mb',\n};\n```\n\n### Custom Config\n\nDeveloper can custom additional file extensions:\n\n```js\n// config/config.default.js\nexports.multipart = {\n  // will append to whilelist\n  fileExtensions: [\n    '.foo',\n    '.apk',\n  ],\n};\n```\n\nCan also **override** built-in whitelist, such as only allow png:\n\n```js\n// config/config.default.js\nexports.multipart = {\n  whitelist: [\n    '.png',\n  ],\n};\n```\n\nOr by functionï¼š\n\n```js\nexports.multipart = {\n  whitelist: (filename) => [ '.png' ].includes(path.extname(filename) || '')\n};\n```\n\n**Note: if define `whitelist`, then `fileExtensions` will be ignored.**\n\n## Examples\n\nMore examples please follow:\n\n- [Handle multipart request in `stream` mode](https://github.com/eggjs/examples/tree/master/multipart)\n- [Handle multipart request in `file` mode](https://github.com/eggjs/examples/tree/master/multipart-file-mode)\n\n## `file` mode: the easy way\n\nIf you don't know the [Node.js Stream](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html) work, maybe you should use the `file` mode to get started.\n\nThe usage very similar to [bodyParser](https://eggjs.org/en/basics/controller.html#body).\n\n- `ctx.request.body`: Get all the multipart fields and values, except `file`.\n- `ctx.request.files`: Contains all `file` from the multipart request, it's an Array object.\n\n**WARNING: you should remove the temporary upload files after you use it**,\nthe `async ctx.cleanupRequestFiles()` method will be very helpful.\n\n### Enable `file` mode on config\n\nYou need to set `config.multipart.mode = 'file'` to enable `file` mode:\n\n```js\n// config/config.default.js\nexports.multipart = {\n  mode: 'file',\n};\n```\n\nAfter `file` mode enable, egg will remove the old temporary files(don't include today's files) on `04:30 AM` every day by default.\n\n```js\nconfig.multipart = {\n  mode: 'file',\n  tmpdir: path.join(os.tmpdir(), 'egg-multipart-tmp', appInfo.name),\n  cleanSchedule: {\n    // run tmpdir clean job on every day 04:30 am\n    // cron style see https://github.com/eggjs/egg-schedule#cron-style-scheduling\n    cron: '0 30 4 * * *',\n  },\n};\n```\n\n### Upload One File\n\n```html\n<form method=\"POST\" action=\"/upload?_csrf={{ ctx.csrf | safe }}\" enctype=\"multipart/form-data\">\n  title: <input name=\"title\" />\n  file: <input name=\"file\" type=\"file\" />\n  <button type=\"submit\">Upload</button>\n</form>\n```\n\nController which hanlder `POST /upload`:\n\n```js\n// app/controller/upload.js\nconst Controller = require('egg').Controller;\nconst fs = require('mz/fs');\n\nmodule.exports = class extends Controller {\n  async upload() {\n    const { ctx } = this;\n    const file = ctx.request.files[0];\n    const name = 'egg-multipart-test/' + path.basename(file.filename);\n    let result;\n    try {\n      // process file or upload to cloud storage\n      result = await ctx.oss.put(name, file.filepath);\n    } finally {\n      // need to remove the tmp files\n      await ctx.cleanupRequestFiles();\n    }\n\n    ctx.body = {\n      url: result.url,\n      // get all field values\n      requestBody: ctx.request.body,\n    };\n  }\n};\n```\n\n### Upload Multiple Files\n\n```html\n<form method=\"POST\" action=\"/upload?_csrf={{ ctx.csrf | safe }}\" enctype=\"multipart/form-data\">\n  title: <input name=\"title\" />\n  file1: <input name=\"file1\" type=\"file\" />\n  file2: <input name=\"file2\" type=\"file\" />\n  <button type=\"submit\">Upload</button>\n</form>\n```\n\nController which hanlder `POST /upload`:\n\n```js\n// app/controller/upload.js\nconst Controller = require('egg').Controller;\nconst fs = require('mz/fs');\n\nmodule.exports = class extends Controller {\n  async upload() {\n    const { ctx } = this;\n    console.log(ctx.request.body);\n    console.log('got %d files', ctx.request.files.length);\n    for (const file of ctx.request.files) {\n      console.log('field: ' + file.fieldname);\n      console.log('filename: ' + file.filename);\n      console.log('encoding: ' + file.encoding);\n      console.log('mime: ' + file.mime);\n      console.log('tmp filepath: ' + file.filepath);\n      let result;\n      try {\n        // process file or upload to cloud storage\n        result = await ctx.oss.put('egg-multipart-test/' + file.filename, file.filepath);\n      } finally {\n        // need to remove the tmp files\n        await ctx.cleanupRequestFiles();\n      }\n      console.log(result);\n    }\n  }\n};\n```\n\n## `stream` mode: the hard way\n\nIf you're well-known about know the Node.js Stream work, you should use the `stream` mode.\n\n### Upload One File\n\nYou can got upload stream by `ctx.getFileStream*()`.\n\n```html\n<form method=\"POST\" action=\"/upload?_csrf={{ ctx.csrf | safe }}\" enctype=\"multipart/form-data\">\n  title: <input name=\"title\" />\n  file: <input name=\"file\" type=\"file\" />\n  <button type=\"submit\">Upload</button>\n</form>\n```\n\nController which hanlder `POST /upload`:\n\n```js\n// app/controller/upload.js\nconst path = require('path');\nconst sendToWormhole = require('stream-wormhole');\nconst Controller = require('egg').Controller;\n\nmodule.exports = class extends Controller {\n  async upload() {\n    const { ctx } = this;\n    // file not exists will response 400 error\n    const stream = await ctx.getFileStream();\n    const name = 'egg-multipart-test/' + path.basename(stream.filename);\n    // process file or upload to cloud storage\n    const result = await ctx.oss.put(name, stream);\n\n    ctx.body = {\n      url: result.url,\n      // process form fields by `stream.fields`\n      fields: stream.fields,\n    };\n  }\n\n  async uploadNotRequiredFile() {\n    const { ctx } = this;\n    // file not required\n    const stream = await ctx.getFileStream({ requireFile: false });\n    let result;\n    if (stream.filename) {\n      const name = 'egg-multipart-test/' + path.basename(stream.filename);\n      // process file or upload to cloud storage\n      const result = await ctx.oss.put(name, stream);\n    } else {\n      // must consume the empty stream\n      await sendToWormhole(stream);\n    }\n\n    ctx.body = {\n      url: result && result.url,\n      // process form fields by `stream.fields`\n      fields: stream.fields,\n    };\n  }\n};\n```\n\n### Upload Multiple Files\n\n```html\n<form method=\"POST\" action=\"/upload?_csrf={{ ctx.csrf | safe }}\" enctype=\"multipart/form-data\">\n  title: <input name=\"title\" />\n  file1: <input name=\"file1\" type=\"file\" />\n  file2: <input name=\"file2\" type=\"file\" />\n  <button type=\"submit\">Upload</button>\n</form>\n```\n\nController which hanlder `POST /upload`:\n\n```js\n// app/controller/upload.js\nconst Controller = require('egg').Controller;\n\nmodule.exports = class extends Controller {\n  async upload() {\n    const { ctx } = this;\n    const parts = ctx.multipart();\n    let part;\n    while ((part = await parts()) != null) {\n      if (part.length) {\n        // arrays are busboy fields\n        console.log('field: ' + part[0]);\n        console.log('value: ' + part[1]);\n        console.log('valueTruncated: ' + part[2]);\n        console.log('fieldnameTruncated: ' + part[3]);\n      } else {\n        if (!part.filename) {\n          // user click `upload` before choose a file,\n          // `part` will be file stream, but `part.filename` is empty\n          // must handler this, such as log error.\n          continue;\n        }\n        // otherwise, it's a stream\n        console.log('field: ' + part.fieldname);\n        console.log('filename: ' + part.filename);\n        console.log('encoding: ' + part.encoding);\n        console.log('mime: ' + part.mime);\n        const result = await ctx.oss.put('egg-multipart-test/' + part.filename, part);\n        console.log(result);\n      }\n    }\n    console.log('and we are done parsing the form!');\n  }\n};\n```\n\n## License\n\n[MIT](https://github.com/eggjs/egg-multipart/blob/master/LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/eggjs/egg-multipart.git"
  },
  "scripts": {
    "autod": "autod",
    "ci": "egg-bin pkgfiles && npm run lint && npm run cov",
    "ci-windows": "egg-bin pkgfiles && npm run lint -- --fix && npm run cov",
    "cov": "egg-bin cov",
    "lint": "eslint .",
    "pkgfiles": "egg-bin pkgfiles",
    "test": "npm run lint -- --fix && npm run test-local",
    "test-local": "egg-bin test"
  },
  "version": "2.4.0"
}
