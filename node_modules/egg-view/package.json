{
  "_args": [
    [
      {
        "raw": "egg-view@^2.1.2",
        "scope": null,
        "escapedName": "egg-view",
        "name": "egg-view",
        "rawSpec": "^2.1.2",
        "spec": ">=2.1.2 <3.0.0",
        "type": "range"
      },
      "F:\\liuxin\\egg-project\\node_modules\\egg"
    ]
  ],
  "_from": "egg-view@^2.1.2",
  "_hasShrinkwrap": false,
  "_id": "egg-view@2.1.2",
  "_location": "/egg-view",
  "_nodeVersion": "10.13.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/egg-view_2.1.2_1548843532768_0.17765494412713934"
  },
  "_npmUser": {
    "name": "atian25",
    "email": "atian25@qq.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "egg-view@^2.1.2",
    "scope": null,
    "escapedName": "egg-view",
    "name": "egg-view",
    "rawSpec": "^2.1.2",
    "spec": ">=2.1.2 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/egg"
  ],
  "_resolved": "https://registry.npmjs.org/egg-view/-/egg-view-2.1.2.tgz",
  "_shasum": "144698b23d1b187e1764e5edceae1819810d7a1f",
  "_shrinkwrap": null,
  "_spec": "egg-view@^2.1.2",
  "_where": "F:\\liuxin\\egg-project\\node_modules\\egg",
  "author": {
    "name": "popomore",
    "email": "sakura9515@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/eggjs/egg/issues"
  },
  "ci": {
    "version": "8, 10, 11"
  },
  "dependencies": {
    "mz": "^2.7.0"
  },
  "description": "Base view plugin for egg",
  "devDependencies": {
    "@types/node": "^10.12.18",
    "autod": "^2.10.1",
    "coffee": "^5.2.0",
    "egg": "^2.14.2",
    "egg-bin": "^4.3.5",
    "egg-ci": "^1.11.0",
    "egg-mock": "^3.13.1",
    "eslint": "^4.10.0",
    "eslint-config-egg": "^5.1.1",
    "mz-modules": "^1.0.0",
    "typescript": "^3.2.2",
    "webstorm-disable-index": "^1.2.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-C/EpRwjcstv/qaOJtpphNKeCgjd7AbHayqirY65eICG+0EaH4EiFUoh4b1WhIBiYNJHoV/DkkAW78Uiyr+XkEA==",
    "shasum": "144698b23d1b187e1764e5edceae1819810d7a1f",
    "tarball": "https://registry.npmjs.org/egg-view/-/egg-view-2.1.2.tgz",
    "fileCount": 11,
    "unpackedSize": 22081,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcUXoNCRA9TVsSAnZWagAAUHsP/RBfsXPmQCv8F34AyBMY\nqaydaFTEzIh9gPdEjx8VFUGppEu+OR4ajuMzovDkDdmT0LYOSbi1Ud6lfnYg\nHn2c0JIXxLnpuoocsfw05iL/HFyW3N8AOUHVEpwo4ZaabHZOP0oBhCazS/Hl\n471UoUSXpwdEs+pfTVtCqydV2HWyg4Dqp6T04zd3Hc/vSpK+EAFoihcW9ue7\nJ1/40kCIrhoRo2SCrWjFgr8cwUjPCeujVka7HcyIbWmVzpZ/jPJwwkU7ad73\nFhiZe8IxIo35vlWWKdvuLBa1sXnzVGTdANHiO1vXt7TubGPmUBa9qKblT1CA\nBci34dj0BMHC2F1nHoL/0Vtz8A2wsPAZhAZ/sZi5i/m0HdFrKWBj4am/HDy0\nfsofUyIxHasDe0GKNSLMcm2CoM7/BW9PMDSSvke9tAmeTAtlWuK7c01C+Nfu\nV22PjNjLX077uISdnyEskcpNGxZAsbfwaiVT6J73PkkAhyj+WOQ/A2LKC9vV\niqOP3p8MHuL0a/eyXwand2bjIG7OxpW8sawlHSeaijMVWEN48qtxQqRbwDqz\nIr1yADGUW0MPVqOfIJL/qZKD9VzKZ3FKqHBQUasvP2GPX1WXi3BUmZQ3amm9\nZtCzUtHBSSnSR5KQtTCsEEuuPR9k3ec0gSchWd4mgnd868HU2pq4WyZuZpiB\n6dcO\r\n=Qv9g\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "eggPlugin": {
    "name": "view"
  },
  "engines": {
    "node": ">=8.0.0"
  },
  "files": [
    "app",
    "lib",
    "index.d.ts",
    "config"
  ],
  "gitHead": "656a098d9cdc2dff8aa9ba3f70df37977991c26a",
  "homepage": "https://github.com/eggjs/egg-view#readme",
  "keywords": [
    "egg",
    "eggPlugin",
    "egg-plugin",
    "egg-view",
    "view"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "atian25",
      "email": "atian25@qq.com"
    },
    {
      "name": "dead-horse",
      "email": "dead_horse@qq.com"
    },
    {
      "name": "popomore",
      "email": "sakura9515@gmail.com"
    }
  ],
  "name": "egg-view",
  "optionalDependencies": {},
  "readme": "# egg-view\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![Test coverage][codecov-image]][codecov-url]\n[![David deps][david-image]][david-url]\n[![Known Vulnerabilities][snyk-image]][snyk-url]\n[![npm download][download-image]][download-url]\n\n[npm-image]: https://img.shields.io/npm/v/egg-view.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/egg-view\n[travis-image]: https://img.shields.io/travis/eggjs/egg-view.svg?style=flat-square\n[travis-url]: https://travis-ci.org/eggjs/egg-view\n[codecov-image]: https://img.shields.io/codecov/c/github/eggjs/egg-view.svg?style=flat-square\n[codecov-url]: https://codecov.io/github/eggjs/egg-view?branch=master\n[david-image]: https://img.shields.io/david/eggjs/egg-view.svg?style=flat-square\n[david-url]: https://david-dm.org/eggjs/egg-view\n[snyk-image]: https://snyk.io/test/npm/egg-view/badge.svg?style=flat-square\n[snyk-url]: https://snyk.io/test/npm/egg-view\n[download-image]: https://img.shields.io/npm/dm/egg-view.svg?style=flat-square\n[download-url]: https://npmjs.org/package/egg-view\n\nBase view plugin for egg\n\n**it's a plugin that has been built-in for egg.**\n\n## Install\n\n```bash\n$ npm i egg-view --save\n```\n\n## Usage\n\n```js\n// {app_root}/config/plugin.js\nexports.view = {\n  enable: true,\n  package: 'egg-view',\n};\n```\n\n## Use a template engine\n\n[egg-view] don't have build-in view engine, So you should choose a template engine like [ejs], and install [egg-view-ejs] plugin.\n\nYou can choose a template engine first, link [ejs], so we use [egg-view-ejs] plugin.\n\n`egg-view` is in [eggjs], so you just need configure [egg-view-ejs].\n\n```js\n// config/plugin.js\nexports.ejs = {\n  enable: true,\n  package: 'egg-view-ejs',\n};\n```\n\nConfigure the mapping, the file with `.ejs` extension will be rendered by ejs.\n\n```js\n// config/config.default.js\nexports.view = {\n  mapping: {\n    '.ejs': 'ejs',\n  },\n};\n```\n\nIn controller, you can call `ctx.render`.\n\n```js\nmodule.exports = app => {\n  return class UserController extends app.Controller {\n    async list() {\n      const { ctx } = this;\n      await ctx.render('user.ejs');\n    }\n  };\n};\n```\n\nIf you call `ctx.renderString`, you should specify viewEngine in viewOptions.\n\n```js\nmodule.exports = app => {\n  return class UserController extends app.Controller {\n    async list() {\n      const { ctx } = this;\n      ctx.body = await ctx.renderString('<%= user %>', { user: 'popomore' }, {\n        viewEngine: 'ejs',\n      });\n    }\n  };\n};\n```\n\n## Use multiple view engine\n\n[egg-view] support multiple view engine, so you can use more than one template engine in one application.\n\nIf you want add another template engine like [nunjucks], then you can add [egg-view-nunjucks] plugin.\n\nConfigure the plugin and mapping\n\n```js\n// config/config.default.js\nexports.view = {\n  mapping: {\n    '.ejs': 'ejs',\n    '.nj': 'nunjucks',\n  },\n};\n```\n\nYou can simply render the file with `.nj` extension.\n\n```js\nawait ctx.render('user.nj');\n```\n\n## How to write a view plugin\n\nYou can use [egg-view]' API to register a plugin.\n\n### View engine\n\nCreate a view engine class first, and implement `render` and `renderString`, if the template engine don't support, just throw an error. The view engine is context level, so it receive ctx in `constructor`.\n\n```js\n// lib/view.js\nmodule.exports = class MyView {\n  constructor(ctx) {\n    // do some initialize\n    // get the plugin config from `ctx.app.config`\n  }\n\n  async render(fullpath, locals) {\n    return myengine.render(fullpath, locals);\n  }\n\n  async renderString() { throw new Error('not implement'); }\n};\n```\n\n`render` and `renderString` support generator function, async function, or normal function return a promise.\n\nIf the template engine only support callback, you can wrap it by Promise.\n\n```js\nclass MyView {\n  render(fullpath, locals) {\n    return new Promise((resolve, reject) => {\n      myengine.render(fullpath, locals, (err, result) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(result);\n        }\n      });\n    });\n  }\n};\n```\n\nThese methods receive three arguments, `renderString` will pass tpl as the first argument instead of name in `render`.\n\n`render(name, locals, viewOptions)`\n\n- name: the file path that can resolve from root (`app/view` by default)\n- locals: data used by template\n- viewOptions: the view options for each render, it can override the view default config in `config/config.default.js`. Plugin should implement it if it has config.\n  When you implement view engine, you will receive this options from `render`, the options contain:\n  - root: egg-view will resolve the name to full path, but seperating root and name in viewOptions.\n  - name: the original name when call render\n  - locals: the original locals when call render\n\n`renderString(tpl, locals, viewOptions)`\n\n- tpl: the template string instead of the file, using in `renderString`\n- locals: same as `render`\n- viewOptions: same as `render`\n\n### Register\n\nAfter define a view engine, you can register it.\n\n```js\n// app.js\nmodule.exports = app => {\n  app.view.use('myName', require('./lib/view'));\n};\n```\n\nYou can define a view engine name, normally it's a template name.\n\n### Configure\n\nDefine plugin name and depend on [egg-view]\n\n```json\n{\n  \"eggPlugin\": {\n    \"name\": \"myName\",\n    \"dependencies\": [ \"view\" ]\n  }\n}\n```\n\nSet default config in `config/config.default.js`, the name is equals to plugin name.\n\n```js\nexports.myName = {},\n```\n\nSee some examples\n\n- [egg-view-ejs]\n- [egg-view-nunjucks]\n\n## Configuration\n\n### Root\n\nRoot is `${baseDir}/app/view` by default, but you can define multiple directory, seperated by `,`. [egg-view] will find a file from all root directories.\n\n```js\nmodule.exports = appInfo => {\n  const baseDir = appInfo.baseDir;\n  return {\n    view: {\n      root: `${baseDir}/app/view,${baseDir}/app/view2`\n    }\n  }\n}\n```\n\n### defaultExtension\n\nWhen render a file, you should specify a extension that let [egg-view] know whitch engine you want to use. However you can define `defaultExtension` without write the extension.\n\n```js\n// config/config.default.js\nexports.view = {\n  defaultExtension: '.html',\n};\n\n// controller\nmodule.exports = app => {\n  return class UserController extends app.Controller {\n    async list() {\n      const { ctx } = this;\n      // render user.html\n      await ctx.render('user');\n    }\n  };\n};\n```\n\n### viewEngine and defaultViewEngine\n\nIf you are using `renderString`, you should specify viewEngine in view config, see example above.\n\nHowever, you can define `defaultViewEngine` without set each time.\n\n```js\n// config/config.default.js\nexports.view = {\n  defaultViewEngine: 'ejs',\n};\n```\n\nsee [config/config.default.js](https://github.com/eggjs/egg-view/blob/master/config/config.default.js) for more detail.\n\n## Questions & Suggestions\n\nPlease open an issue [here](https://github.com/eggjs/egg/issues).\n\n## License\n\n[MIT](https://github.com/eggjs/egg-view/blob/master/LICENSE)\n\n\n[eggjs]: https://eggjs.org\n[ejs]: https://github.com/mde/ejs\n[egg-view-ejs]: https://github.com/eggjs/egg-view-ejs\n[egg-view]: https://github.com/eggjs/egg-view\n[nunjucks]: http://mozilla.github.io/nunjucks\n[egg-view-nunjucks]: https://github.com/eggjs/egg-view-nunjucks\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/eggjs/egg-view.git"
  },
  "scripts": {
    "autod": "autod",
    "ci": "npm run lint && npm run cov",
    "cov": "egg-bin cov",
    "lint": "eslint .",
    "pkgfiles": "egg-bin pkgfiles",
    "test": "npm run lint -- --fix && npm run test-local",
    "test-local": "egg-bin test"
  },
  "types": "index.d.ts",
  "version": "2.1.2"
}
